{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport PartyTable from \"./PartyTable\";\nimport ActivityTable from \"./ActivityTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currParty, setCurrParty] = useState([]);\n  const [currUsers, setCurrUsers] = useState([]);\n  const [currActivities, setCurrActivities] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState({});\n  const [currItems, setCurrItems] = useState([]); // const [selectedActivity, setSelectedActivity] = useState({\n  //     activity_name: \"nnn\",\n  //     users_id: [1, 2, 3],\n  //     items: [\n  //         {\n  //             \"item_id\": 3,\n  //             \"item_name\": \"lamp\",\n  //             \"item_price\": 100,\n  //             \"bought_by\": 1\n  //         }\n  //     ]\n  // });\n  // get party from the database once and keep users, activities as stateful components\n\n  const getCurrParty = () => {\n    fetch('/get_recent_party').then(res => res.json()).then(json => setCurrParty(json)).catch(ex => console.log(ex));\n  }; // const getCurrUsers = () => {\n  //     fetch('/get_users')\n  //         .then(res => res.json())\n  //         .then(json => setCurrUsers(json.party_users));\n  // }\n  //\n  // const getCurrActivities = () => {\n  //     fetch('/get_activities')\n  //         .then(res => res.json())\n  //         .then(json => setCurrActivities(json.activities));\n  // }\n  //\n  // const getCurrItems = () => {\n  //     fetch('/get_items')\n  //         .then(res => res.json())\n  //         .then(json => setCurrItems(json.items));\n  // }\n\n\n  const getCurrUsers = party => {\n    setCurrUsers(party.users);\n  };\n\n  const getCurrActivities = currParty => {\n    setCurrActivities(currParty.activities);\n  };\n\n  const getSelectedActivity = () => {\n    setSelectedActivity(currActivities[0]);\n  };\n\n  const getCurrItems = () => {\n    setCurrItems(selectedActivity.items);\n  }; // const currParty = getCurrParty().then(n => {console.log(n)});\n  // const currParty = getCurrParty().then(n => {return n;});\n  // const party = getCurrParty().then(party => {return party;});\n\n\n  useEffect(() => {\n    // getCurrParty().then(party => {setCurrUsers(party.users)});\n    getCurrParty(); // getCurrParty().then(party => {getCurrUsers(party)});\n    // console.log(currParty);\n    // getCurrUsers(party);\n    // console.log(currUsers);\n    // getCurrActivities();\n    // getSelectedActivity();\n    // getCurrItems();\n  }, []);\n  useEffect(() => {\n    setCurrUsers(currParty.users);\n    setCurrActivities(currParty.activities); // setSelectedActivity(currParty.activities[0]);\n    // setCurrItems(currParty.activities[0].items);\n  }, [currParty]);\n  console.log(currActivities);\n  console.log(currActivities[0]); // useEffect(() => {\n  //     setSelectedActivity(currActivities[0]);\n  //     setCurrItems(selectedActivity.items);\n  // }, [currParty, currActivities])\n  // last_viewed patch request\n  // edit mode\n  // jsons may be and are empty in the beginning\n  // be good without e argument and check by presence of user in array\n\n  const handleParticipationClick = (e, activityID, userID) => {\n    setCurrActivities([...currActivities].map(obj => {\n      if (obj.activity_id === activityID) {\n        const updatedUsersID = obj.users_id;\n        e.target.checked ? updatedUsersID.push(userID) : updatedUsersID.splice(updatedUsersID.indexOf(userID));\n        return { ...obj,\n          users_id: updatedUsersID\n        };\n      } else return obj;\n    }));\n  };\n\n  const handlePurchaseClick = (itemID, userID) => {\n    setCurrItems([...currItems].map(obj => {\n      if (obj.item_id === itemID) {\n        return { ...obj,\n          bought_by: userID\n        };\n      } else return obj;\n    }));\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"App\">\n    //     {/*<header className=\"App-header\"></header>*/}\n    //     <div className=\"bukh\">\n    //         <h1>{currParty.name}</h1>\n    //         <PartyTable users={currUsers}\n    //                     activities={currActivities}\n    //                     handleParticipationClick={handleParticipationClick}/>\n    //         <h1>{currActivities[0].activity_name}</h1>\n    //         <ActivityTable users={currUsers}\n    //                        items={currItems}\n    //                        // selectedActivity={selectedActivity}\n    //                        handlePurchaseClick={handlePurchaseClick}/>\n    //     </div>\n    // </div>\n    _jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(App, \"q3WzRRTzv0qKCSibv6igPRyceGs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/App.js"],"names":["React","useEffect","useState","PartyTable","ActivityTable","App","currParty","setCurrParty","currUsers","setCurrUsers","currActivities","setCurrActivities","selectedActivity","setSelectedActivity","currItems","setCurrItems","getCurrParty","fetch","then","res","json","catch","ex","console","log","getCurrUsers","party","users","getCurrActivities","activities","getSelectedActivity","getCurrItems","items","handleParticipationClick","e","activityID","userID","map","obj","activity_id","updatedUsersID","users_id","target","checked","push","splice","indexOf","handlePurchaseClick","itemID","item_id","bought_by"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport PartyTable from \"./PartyTable\"\nimport ActivityTable from \"./ActivityTable\"\n\n\nfunction App() {\n    const [currParty, setCurrParty] = useState([]);\n    const [currUsers, setCurrUsers] = useState([]);\n    const [currActivities, setCurrActivities] = useState([]);\n    const [selectedActivity, setSelectedActivity] = useState({});\n    const [currItems, setCurrItems] = useState([]);\n    // const [selectedActivity, setSelectedActivity] = useState({\n    //     activity_name: \"nnn\",\n    //     users_id: [1, 2, 3],\n    //     items: [\n    //         {\n    //             \"item_id\": 3,\n    //             \"item_name\": \"lamp\",\n    //             \"item_price\": 100,\n    //             \"bought_by\": 1\n    //         }\n    //     ]\n    // });\n\n    // get party from the database once and keep users, activities as stateful components\n    const getCurrParty = () => {\n        fetch('/get_recent_party')\n            .then(res => res.json())\n            .then(json => setCurrParty(json))\n            .catch(ex => console.log(ex));\n    }\n\n    // const getCurrUsers = () => {\n    //     fetch('/get_users')\n    //         .then(res => res.json())\n    //         .then(json => setCurrUsers(json.party_users));\n    // }\n    //\n    // const getCurrActivities = () => {\n    //     fetch('/get_activities')\n    //         .then(res => res.json())\n    //         .then(json => setCurrActivities(json.activities));\n    // }\n    //\n    // const getCurrItems = () => {\n    //     fetch('/get_items')\n    //         .then(res => res.json())\n    //         .then(json => setCurrItems(json.items));\n    // }\n\n    const getCurrUsers = (party) => {\n        setCurrUsers(party.users);\n    }\n\n    const getCurrActivities = (currParty) => {\n            setCurrActivities(currParty.activities);\n    }\n\n    const getSelectedActivity = () => {\n        setSelectedActivity(currActivities[0]);\n    }\n\n    const getCurrItems = () => {\n        setCurrItems(selectedActivity.items);\n    }\n\n    // const currParty = getCurrParty().then(n => {console.log(n)});\n    // const currParty = getCurrParty().then(n => {return n;});\n\n    // const party = getCurrParty().then(party => {return party;});\n\n    useEffect(() => {\n        // getCurrParty().then(party => {setCurrUsers(party.users)});\n        getCurrParty();\n        // getCurrParty().then(party => {getCurrUsers(party)});\n        // console.log(currParty);\n        // getCurrUsers(party);\n        // console.log(currUsers);\n        // getCurrActivities();\n        // getSelectedActivity();\n        // getCurrItems();\n    }, []);\n\n    useEffect(() => {\n        setCurrUsers(currParty.users);\n        setCurrActivities(currParty.activities);\n        // setSelectedActivity(currParty.activities[0]);\n        // setCurrItems(currParty.activities[0].items);\n    }, [currParty])\n    console.log(currActivities);\n    console.log(currActivities[0]);\n\n    // useEffect(() => {\n    //     setSelectedActivity(currActivities[0]);\n    //     setCurrItems(selectedActivity.items);\n    // }, [currParty, currActivities])\n\n    // last_viewed patch request\n    // edit mode\n    // jsons may be and are empty in the beginning\n\n    // be good without e argument and check by presence of user in array\n    const handleParticipationClick = (e, activityID, userID) => {\n        setCurrActivities([...currActivities].map(obj => {\n            if (obj.activity_id === activityID) {\n                const updatedUsersID = obj.users_id;\n                e.target.checked ?\n                    updatedUsersID.push(userID) :\n                    updatedUsersID.splice(updatedUsersID.indexOf(userID));\n                return {\n                    ...obj,\n                    users_id: updatedUsersID\n                }\n            } else return obj;\n        }));\n    }\n\n    const handlePurchaseClick = (itemID, userID) => {\n        setCurrItems([...currItems].map(obj => {\n            if (obj.item_id === itemID) {\n                return {\n                    ...obj,\n                    bought_by: userID\n                }\n            } else return obj;\n        }));\n    }\n\n    return (\n        // <div className=\"App\">\n        //     {/*<header className=\"App-header\"></header>*/}\n        //     <div className=\"bukh\">\n        //         <h1>{currParty.name}</h1>\n        //         <PartyTable users={currUsers}\n        //                     activities={currActivities}\n        //                     handleParticipationClick={handleParticipationClick}/>\n        //         <h1>{currActivities[0].activity_name}</h1>\n        //         <ActivityTable users={currUsers}\n        //                        items={currItems}\n        //                        // selectedActivity={selectedActivity}\n        //                        handlePurchaseClick={handlePurchaseClick}/>\n        //     </div>\n        // </div>\n        <p></p>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}