{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ParticipationCheckbox(props) {\n  const handleClick = e => {\n    props.handleCheckboxClick(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: props.defaultChecked,\n      value: [props.activityID, props.userID],\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n\n_c = ParticipationCheckbox;\n\nfunction HeaderRowCell(props) {\n  return /*#__PURE__*/_jsxDEV(\"th\", {\n    children: props.value.toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 12\n  }, this);\n}\n\n_c2 = HeaderRowCell;\n\nfunction RowCell(props) {\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n}\n\n_c3 = RowCell;\n\nfunction TotalAndDebt(props) {\n  const totalExpenses = Object.entries(props.expenses); // artificially added activity users break the table\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Total\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), totalExpenses.map(expense => /*#__PURE__*/_jsxDEV(RowCell, {\n      value: expense[1]\n    }, expense[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 43\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = TotalAndDebt;\n\nfunction ActivityRow(props) {\n  const partyUsersID = props.partyUsersID;\n  const activityID = props.activityID;\n  const activityName = props.activityName;\n  const activityUsers = props.activityUsers;\n  const activityExpense = props.activityExpense;\n  let checkboxes = [];\n  console.log(partyUsersID);\n  console.log(activityUsers);\n\n  for (const userID of partyUsersID) {\n    console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: activityID,\n      userID: partyUsersID[userID],\n      defaultChecked: activityUsers.includes(userID)\n    }, activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderRowCell, {\n      value: activityName\n    }, activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: activityExpense\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_c5 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id);\n  let activitiesRows = [];\n  let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n  console.log(totalUserExpenses);\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n\n    for (const userID of activityUsers) {\n      totalUserExpenses[userID] += partialExpense;\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  }\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalAndDebt, {\n    expenses: totalUserExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c6 = Activities;\nexport default Activities; // <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ParticipationCheckbox\");\n$RefreshReg$(_c2, \"HeaderRowCell\");\n$RefreshReg$(_c3, \"RowCell\");\n$RefreshReg$(_c4, \"TotalAndDebt\");\n$RefreshReg$(_c5, \"ActivityRow\");\n$RefreshReg$(_c6, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["ParticipationCheckbox","props","handleClick","e","handleCheckboxClick","defaultChecked","activityID","userID","HeaderRowCell","value","toString","RowCell","TotalAndDebt","totalExpenses","Object","entries","expenses","map","expense","ActivityRow","partyUsersID","activityName","activityUsers","activityExpense","checkboxes","console","log","push","includes","Activities","activities","users","user","user_id","activitiesRows","totalUserExpenses","fromEntries","activity","activity_id","activity_name","users_id","activity_expense","partialExpense","length","Math","round"],"mappings":"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","sourcesContent":["function ParticipationCheckbox(props) {\n    const handleClick = (e) => {\n        props.handleCheckboxClick(e);\n    }\n    return <td><input type=\"checkbox\"\n                      defaultChecked={props.defaultChecked}\n                      value={[props.activityID, props.userID]}\n                      onClick={handleClick}/></td>\n}\n\nfunction HeaderRowCell(props) {\n    return <th>{props.value.toString()}</th>\n}\n\nfunction RowCell(props) {\n    return <td>{props.value}</td>\n}\n\nfunction TotalAndDebt(props) {\n    const totalExpenses = Object.entries(props.expenses);\n    // artificially added activity users break the table\n    return (\n        <tr>\n            <th><i>Total</i></th>\n            {totalExpenses.map(expense => <RowCell key={expense[0]} value={expense[1]}/>)}\n        </tr>\n    );\n}\n\nfunction ActivityRow(props) {\n    const partyUsersID = props.partyUsersID;\n    const activityID = props.activityID;\n    const activityName = props.activityName;\n    const activityUsers = props.activityUsers;\n    const activityExpense = props.activityExpense;\n    let checkboxes = [];\n\n    console.log(partyUsersID);\n    console.log(activityUsers);\n    for (const userID of partyUsersID) {\n        console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n        checkboxes.push(<ParticipationCheckbox key={activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={activityID}\n                                               userID={partyUsersID[userID]}\n                                               defaultChecked={activityUsers.includes(userID)}/>);\n    }\n    return (\n        <tr>\n            <HeaderRowCell key={activityName} value={activityName}/>\n            {checkboxes}\n            <RowCell key={activityID} value={activityExpense}/>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n    console.log(totalUserExpenses);\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        for (const userID of activityUsers) {\n            totalUserExpenses[userID] += partialExpense;\n        }\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    activitiesRows.push(<TotalAndDebt key={-1} expenses={totalUserExpenses}/>)\n\n    return (activitiesRows);\n}\n\nexport default Activities;\n\n// <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n"]},"metadata":{},"sourceType":"module"}