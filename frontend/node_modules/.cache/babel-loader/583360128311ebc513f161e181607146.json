{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ParticipationCheckbox() {\n  // onClick = () => TableHandler(user_id, party_id)\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 12\n  }, this);\n}\n\n_c = ParticipationCheckbox;\n\nfunction TotalAndDebt(props) {\n  const totalExpenses = Object.values(props.expenses);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: \"Total\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), totalExpenses.map(expense => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: expense\n    }, props.expenses.userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 43\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = TotalAndDebt;\n\nfunction ActivityRow(props) {\n  const usersID = props.partyUsersID;\n  const activityID = props.activityID;\n  let checkboxes = [];\n\n  for (const userID of usersID) {\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {}, activityID.toString() + userID.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.activityName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.activityExpense\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id); // const activitiesNames = activities && activities.map(activity => activity.activity_name.toString())\n  // const activitiesUsers = activities && activities.map(activity => activity.users_id)\n  // const activitiesTotalPrice = activities && activities.map(activity => activity.total_price.toString())\n\n  let activitiesRows = [];\n  let totalUserExpenses = {};\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n\n    for (const userID of activityUsers) {\n      if (!(userID in totalUserExpenses)) {\n        totalUserExpenses[userID] = 0;\n      }\n\n      totalUserExpenses[userID] += partialExpense;\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  } // console.log(totalUserExpenses);\n\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalAndDebt, {\n    expenses: totalUserExpenses\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 25\n  }, this)); // var totalUserExpenses = [];\n  //\n  // for (const userID of partyUsersID) {\n  //     var expense = 0;\n  //     for (const activity of activities) {\n  //         // const partialExpense =\n  //         const activityExpense = activity.activity_expense;\n  //         const activityUsersNumber = activity.users_id.length;\n  //         console.log(activityExpense, activityUsersNumber);\n  //         expense += Math.round(activityExpense / activityUsersNumber * 100) / 100;\n  //     }\n  //     totalUserExpenses.push(expense);\n  // }\n\n  return activitiesRows; // <tr>\n  //     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n  //                                                                       activityName={activityName}/>)}\n  //     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n  //         usersID={activityUsers}/>)}\n  //     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n  //         key={activityTotalPrice.toString()}\n  //         totalPrice={activityTotalPrice}/>)}\n  // </tr>\n  //     );\n}\n\n_c4 = Activities;\nexport default Activities;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ParticipationCheckbox\");\n$RefreshReg$(_c2, \"TotalAndDebt\");\n$RefreshReg$(_c3, \"ActivityRow\");\n$RefreshReg$(_c4, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["ParticipationCheckbox","TotalAndDebt","props","totalExpenses","Object","values","expenses","map","expense","userID","ActivityRow","usersID","partyUsersID","activityID","checkboxes","push","toString","activityName","activityExpense","Activities","activities","users","user","user_id","activitiesRows","totalUserExpenses","activity","activity_id","activity_name","activityUsers","users_id","activity_expense","partialExpense","length","Math","round"],"mappings":"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","sourcesContent":["function ParticipationCheckbox() {\n    // onClick = () => TableHandler(user_id, party_id)\n    return <td><input type=\"checkbox\"/></td>\n}\n\nfunction TotalAndDebt(props) {\n    const totalExpenses = Object.values(props.expenses);\n    return (\n        <tr>\n            <th>Total</th>\n            {totalExpenses.map(expense => <td key={props.expenses.userID}>{expense}</td>)}\n        </tr>\n    );\n}\n\nfunction ActivityRow(props) {\n    const usersID = props.partyUsersID;\n    const activityID = props.activityID;\n    let checkboxes = [];\n\n    for (const userID of usersID) {\n        checkboxes.push(<ParticipationCheckbox key={activityID.toString() + userID.toString()}/>);\n    }\n    return (\n        <tr>\n            <td>{props.activityName}</td>\n            {checkboxes}\n            <td>{props.activityExpense}</td>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n    // const activitiesNames = activities && activities.map(activity => activity.activity_name.toString())\n    // const activitiesUsers = activities && activities.map(activity => activity.users_id)\n    // const activitiesTotalPrice = activities && activities.map(activity => activity.total_price.toString())\n\n    let activitiesRows = [];\n    let totalUserExpenses = {};\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}/>);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        for (const userID of activityUsers) {\n            if (!(userID in totalUserExpenses)) {\n                totalUserExpenses[userID] = 0;\n            }\n            totalUserExpenses[userID] += partialExpense;\n        }\n\n\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    // console.log(totalUserExpenses);\n\n    activitiesRows.push(<TotalAndDebt expenses={totalUserExpenses}/>)\n\n    // var totalUserExpenses = [];\n    //\n    // for (const userID of partyUsersID) {\n    //     var expense = 0;\n    //     for (const activity of activities) {\n    //         // const partialExpense =\n    //         const activityExpense = activity.activity_expense;\n    //         const activityUsersNumber = activity.users_id.length;\n    //         console.log(activityExpense, activityUsersNumber);\n    //         expense += Math.round(activityExpense / activityUsersNumber * 100) / 100;\n    //     }\n    //     totalUserExpenses.push(expense);\n    // }\n\n    return (\n        activitiesRows);\n    // <tr>\n    //     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n    //                                                                       activityName={activityName}/>)}\n    //     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n    //         usersID={activityUsers}/>)}\n    //     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n    //         key={activityTotalPrice.toString()}\n    //         totalPrice={activityTotalPrice}/>)}\n    // </tr>\n    //     );\n}\n\nexport default Activities;"]},"metadata":{},"sourceType":"module"}