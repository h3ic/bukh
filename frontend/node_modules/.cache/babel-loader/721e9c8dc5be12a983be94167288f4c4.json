{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { ParticipationCheckbox, HeaderRowCell, RowCell } from \"./TableElements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TotalAndDebt(props) {\n  const totalExpenses = Object.entries(props.expenses); // artificially added activity users break the table\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Total\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), totalExpenses.map(expense => /*#__PURE__*/_jsxDEV(RowCell, {\n      value: expense[1]\n    }, expense[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 43\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TotalAndDebt;\n\nfunction ActivityRow(props) {\n  const partyUsersID = props.partyUsersID;\n  const activityID = props.activityID;\n  const activityName = props.activityName;\n  const activityUsers = props.activityUsers;\n  const activityExpense = props.activityExpense;\n  let checkboxes = []; // console.log(partyUsersID);\n  // console.log(activityUsers);\n\n  for (const userID of partyUsersID) {\n    // console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: activityID,\n      userID: partyUsersID[userID],\n      defaultChecked: activityUsers.includes(userID)\n    }, activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderRowCell, {\n      value: activityName\n    }, activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: activityExpense\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id);\n  let activitiesRows = [];\n  let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n\n    for (const userID of activityUsers) {\n      totalUserExpenses[userID] += partialExpense;\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  }\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalAndDebt, {\n    expenses: totalUserExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c3 = Activities;\nexport default Activities; // <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TotalAndDebt\");\n$RefreshReg$(_c2, \"ActivityRow\");\n$RefreshReg$(_c3, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["ParticipationCheckbox","HeaderRowCell","RowCell","TotalAndDebt","props","totalExpenses","Object","entries","expenses","map","expense","ActivityRow","partyUsersID","activityID","activityName","activityUsers","activityExpense","checkboxes","userID","push","handleCheckboxClick","includes","Activities","activities","users","user","user_id","activitiesRows","totalUserExpenses","fromEntries","activity","activity_id","activity_name","users_id","activity_expense","partialExpense","length","Math","round"],"mappings":"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","sourcesContent":["import {ParticipationCheckbox, HeaderRowCell, RowCell} from \"./TableElements\";\n\nfunction TotalAndDebt(props) {\n    const totalExpenses = Object.entries(props.expenses);\n    // artificially added activity users break the table\n    return (\n        <tr>\n            <th><i>Total</i></th>\n            {totalExpenses.map(expense => <RowCell key={expense[0]} value={expense[1]}/>)}\n        </tr>\n    );\n}\n\nfunction ActivityRow(props) {\n    const partyUsersID = props.partyUsersID;\n    const activityID = props.activityID;\n    const activityName = props.activityName;\n    const activityUsers = props.activityUsers;\n    const activityExpense = props.activityExpense;\n    let checkboxes = [];\n\n    // console.log(partyUsersID);\n    // console.log(activityUsers);\n    for (const userID of partyUsersID) {\n        // console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n        checkboxes.push(<ParticipationCheckbox key={activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={activityID}\n                                               userID={partyUsersID[userID]}\n                                               defaultChecked={activityUsers.includes(userID)}/>);\n    }\n    return (\n        <tr>\n            <HeaderRowCell key={activityName} value={activityName}/>\n            {checkboxes}\n            <RowCell key={activityID} value={activityExpense}/>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        for (const userID of activityUsers) {\n            totalUserExpenses[userID] += partialExpense;\n        }\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    activitiesRows.push(<TotalAndDebt key={-1} expenses={totalUserExpenses}/>)\n\n    return (activitiesRows);\n}\n\nexport default Activities;\n\n// <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n"]},"metadata":{},"sourceType":"module"}