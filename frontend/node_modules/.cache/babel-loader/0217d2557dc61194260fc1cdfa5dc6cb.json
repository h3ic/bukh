{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport PartyTable from \"./PartyTable\";\nimport ActivityTable from \"./ActivityTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currParty, setCurrParty] = useState([]);\n  const [currUsers, setCurrUsers] = useState([]);\n  const [currActivities, setCurrActivities] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState({});\n  const [currItems, setCurrItems] = useState([]); // const [selectedActivity, setSelectedActivity] = useState({\n  //     activity_name: \"nnn\",\n  //     users_id: [1, 2, 3],\n  //     items: [\n  //         {\n  //             \"item_id\": 3,\n  //             \"item_name\": \"lamp\",\n  //             \"item_price\": 100,\n  //             \"bought_by\": 1\n  //         }\n  //     ]\n  // });\n  // get party from the database once and keep users, activities as stateful components\n\n  const loadCurrParty = () => {\n    fetch('/get_recent_party').then(res => res.json()).then(json => setCurrParty(json)).catch(ex => console.log(ex));\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      loadCurrParty();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      setCurrUsers(currParty.users);\n      setCurrActivities(currParty.activities);\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  console.log(currParty); // const getCurrUsers = () => {\n  //     fetch('/get_users')\n  //         .then(res => res.json())\n  //         .then(json => setCurrUsers(json.party_users));\n  // }\n  //\n  // const getCurrActivities = () => {\n  //     fetch('/get_activities')\n  //         .then(res => res.json())\n  //         .then(json => setCurrActivities(json.activities));\n  // }\n  //\n  // const getCurrItems = () => {\n  //     fetch('/get_items')\n  //         .then(res => res.json())\n  //         .then(json => setCurrItems(json.items));\n  // }\n  // last_viewed patch request\n  // edit mode\n  // jsons may be and are empty in the beginning\n  // be good without e argument and check by presence of user in array\n\n  const handleParticipationClick = (e, activityID, userID) => {\n    setCurrActivities([...currActivities].map(obj => {\n      if (obj.activity_id === activityID) {\n        const updatedUsersID = obj.users_id;\n        e.target.checked ? updatedUsersID.push(userID) : updatedUsersID.splice(updatedUsersID.indexOf(userID));\n        return { ...obj,\n          users_id: updatedUsersID\n        };\n      } else return obj;\n    }));\n  };\n\n  const handlePurchaseClick = (itemID, userID) => {\n    setCurrItems([...currItems].map(obj => {\n      if (obj.item_id === itemID) {\n        return { ...obj,\n          bought_by: userID\n        };\n      } else return obj;\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currParty.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PartyTable, {\n      users: currUsers,\n      activities: currActivities,\n      handleParticipationClick: handleParticipationClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"q3WzRRTzv0qKCSibv6igPRyceGs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/App.js"],"names":["React","useEffect","useState","PartyTable","ActivityTable","App","currParty","setCurrParty","currUsers","setCurrUsers","currActivities","setCurrActivities","selectedActivity","setSelectedActivity","currItems","setCurrItems","loadCurrParty","fetch","then","res","json","catch","ex","console","log","mounted","users","activities","handleParticipationClick","e","activityID","userID","map","obj","activity_id","updatedUsersID","users_id","target","checked","push","splice","indexOf","handlePurchaseClick","itemID","item_id","bought_by","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport PartyTable from \"./PartyTable\"\nimport ActivityTable from \"./ActivityTable\"\n\n\nfunction App() {\n    const [currParty, setCurrParty] = useState([]);\n    const [currUsers, setCurrUsers] = useState([]);\n    const [currActivities, setCurrActivities] = useState([]);\n    const [selectedActivity, setSelectedActivity] = useState({});\n    const [currItems, setCurrItems] = useState([]);\n    // const [selectedActivity, setSelectedActivity] = useState({\n    //     activity_name: \"nnn\",\n    //     users_id: [1, 2, 3],\n    //     items: [\n    //         {\n    //             \"item_id\": 3,\n    //             \"item_name\": \"lamp\",\n    //             \"item_price\": 100,\n    //             \"bought_by\": 1\n    //         }\n    //     ]\n    // });\n\n    // get party from the database once and keep users, activities as stateful components\n    const loadCurrParty = () => {\n        fetch('/get_recent_party')\n            .then(res => res.json())\n            .then(json => setCurrParty(json))\n            .catch(ex => console.log(ex));\n    }\n\n    useEffect(() => {\n        let mounted = true;\n        if (mounted) {\n            loadCurrParty();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n        if (mounted) {\n            setCurrUsers(currParty.users);\n            setCurrActivities(currParty.activities);\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    console.log(currParty);\n    // const getCurrUsers = () => {\n    //     fetch('/get_users')\n    //         .then(res => res.json())\n    //         .then(json => setCurrUsers(json.party_users));\n    // }\n    //\n    // const getCurrActivities = () => {\n    //     fetch('/get_activities')\n    //         .then(res => res.json())\n    //         .then(json => setCurrActivities(json.activities));\n    // }\n    //\n    // const getCurrItems = () => {\n    //     fetch('/get_items')\n    //         .then(res => res.json())\n    //         .then(json => setCurrItems(json.items));\n    // }\n\n    // last_viewed patch request\n    // edit mode\n    // jsons may be and are empty in the beginning\n\n    // be good without e argument and check by presence of user in array\n    const handleParticipationClick = (e, activityID, userID) => {\n        setCurrActivities([...currActivities].map(obj => {\n            if (obj.activity_id === activityID) {\n                const updatedUsersID = obj.users_id;\n                e.target.checked ?\n                    updatedUsersID.push(userID) :\n                    updatedUsersID.splice(updatedUsersID.indexOf(userID));\n                return {\n                    ...obj,\n                    users_id: updatedUsersID\n                }\n            } else return obj;\n        }));\n    }\n\n    const handlePurchaseClick = (itemID, userID) => {\n        setCurrItems([...currItems].map(obj => {\n            if (obj.item_id === itemID) {\n                return {\n                    ...obj,\n                    bought_by: userID\n                }\n            } else return obj;\n        }));\n    }\n\n    return (\n        <div className=\"App\">\n            {/*<header className=\"App-header\"></header>*/}\n            <h1>{currParty.name}</h1>\n            <PartyTable users={currUsers}\n                        activities={currActivities}\n                        handleParticipationClick={handleParticipationClick}/>\n            {/*<h1>{currActivities[0].activity_name}</h1>*/}\n            {/*<ActivityTable users={currUsers}*/}\n            {/*               items={currItems}*/}\n            {/*    selectedActivity={selectedActivity}*/}\n            {/*               handlePurchaseClick={handlePurchaseClick}/>*/}\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}