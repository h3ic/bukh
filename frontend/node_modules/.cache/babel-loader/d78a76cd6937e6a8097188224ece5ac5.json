{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ParticipationCheckbox(props) {\n  const handleClick = e => {\n    props.handleCheckboxClick(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      value: [props.activityID, props.userID],\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n\n_c = ParticipationCheckbox;\n\nfunction RowCell(props) {\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n}\n\n_c2 = RowCell;\n\nfunction TotalAndDebt(props) {\n  const totalExpenses = Object.entries(props.expenses);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: \"Total\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), totalExpenses.map(expense => /*#__PURE__*/_jsxDEV(RowCell, {\n      value: expense[1]\n    }, expense[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 43\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = TotalAndDebt;\n\nfunction ActivityRow(props) {\n  const usersID = props.partyUsersID;\n  const activityID = props.activityID;\n  const activityName = props.activityName;\n  const activityUsers = props.activityUsers;\n  const activityExpense = props.activityExpense;\n  let checkboxes = []; // TODO: pre state to render\n\n  for (const userID of usersID) {\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: activityID,\n      userID: userID,\n      defaultChecked: userID in activityUsers\n    }, activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(RowCell, {\n      value: activityName\n    }, activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: activityExpense\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id);\n  let activitiesRows = [];\n  let totalUserExpenses = {};\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n\n    for (const userID of activityUsers) {\n      if (!(userID in totalUserExpenses)) {\n        totalUserExpenses[userID] = 0;\n      }\n\n      totalUserExpenses[userID] += partialExpense;\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  }\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalAndDebt, {\n    expenses: totalUserExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c5 = Activities;\nexport default Activities; // var totalUserExpenses = [];\n//\n// for (const userID of partyUsersID) {\n//     var expense = 0;\n//     for (const activity of activities) {\n//         // const partialExpense =\n//         const activityExpense = activity.activity_expense;\n//         const activityUsersNumber = activity.users_id.length;\n//         console.log(activityExpense, activityUsersNumber);\n//         expense += Math.round(activityExpense / activityUsersNumber * 100) / 100;\n//     }\n//     totalUserExpenses.push(expense);\n// }\n// <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ParticipationCheckbox\");\n$RefreshReg$(_c2, \"RowCell\");\n$RefreshReg$(_c3, \"TotalAndDebt\");\n$RefreshReg$(_c4, \"ActivityRow\");\n$RefreshReg$(_c5, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["ParticipationCheckbox","props","handleClick","e","handleCheckboxClick","activityID","userID","RowCell","value","TotalAndDebt","totalExpenses","Object","entries","expenses","map","expense","ActivityRow","usersID","partyUsersID","activityName","activityUsers","activityExpense","checkboxes","push","Activities","activities","users","user","user_id","activitiesRows","totalUserExpenses","activity","activity_id","activity_name","users_id","activity_expense","partialExpense","length","Math","round"],"mappings":";;;AAAA,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAClC,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACvBF,IAAAA,KAAK,CAACG,mBAAN,CAA0BD,CAA1B;AACH,GAFD;;AAGA,sBAAO;AAAA,2BAAI;AAAO,MAAA,IAAI,EAAC,UAAZ;AACO,MAAA,KAAK,EAAE,CAACF,KAAK,CAACI,UAAP,EAAmBJ,KAAK,CAACK,MAAzB,CADd;AAEO,MAAA,OAAO,EAAEJ;AAFhB;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH;;KAPQF,qB;;AAST,SAASO,OAAT,CAAiBN,KAAjB,EAAwB;AACpB,sBAAO;AAAA,cAAKA,KAAK,CAACO;AAAX;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;MAFQD,O;;AAIT,SAASE,YAAT,CAAsBR,KAAtB,EAA6B;AACzB,QAAMS,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAeX,KAAK,CAACY,QAArB,CAAtB;AACA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKH,aAAa,CAACI,GAAd,CAAkBC,OAAO,iBAAI,QAAC,OAAD;AAA0B,MAAA,KAAK,EAAEA,OAAO,CAAC,CAAD;AAAxC,OAAcA,OAAO,CAAC,CAAD,CAArB;AAAA;AAAA;AAAA;AAAA,YAA7B,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;MARQN,Y;;AAUT,SAASO,WAAT,CAAqBf,KAArB,EAA4B;AACxB,QAAMgB,OAAO,GAAGhB,KAAK,CAACiB,YAAtB;AACA,QAAMb,UAAU,GAAGJ,KAAK,CAACI,UAAzB;AACA,QAAMc,YAAY,GAAGlB,KAAK,CAACkB,YAA3B;AACA,QAAMC,aAAa,GAAGnB,KAAK,CAACmB,aAA5B;AACA,QAAMC,eAAe,GAAGpB,KAAK,CAACoB,eAA9B;AACA,MAAIC,UAAU,GAAG,EAAjB,CANwB,CAQxB;;AACA,OAAK,MAAMhB,MAAX,IAAqBW,OAArB,EAA8B;AAC1BK,IAAAA,UAAU,CAACC,IAAX,eAAgB,QAAC,qBAAD;AACuB,MAAA,mBAAmB,EAAEtB,KAAK,CAACG,mBADlD;AAEuB,MAAA,UAAU,EAAEC,UAFnC;AAGuB,MAAA,MAAM,EAAEC,MAH/B;AAIuB,MAAA,cAAc,EAAEA,MAAM,IAAIc;AAJjD,OAA4Bf,UAAU,GAAGC,MAAzC;AAAA;AAAA;AAAA;AAAA,YAAhB;AAKH;;AACD,sBACI;AAAA,4BACI,QAAC,OAAD;AAA4B,MAAA,KAAK,EAAEa;AAAnC,OAAcA,YAAd;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKG,UAFL,eAGI,QAAC,OAAD;AAA0B,MAAA,KAAK,EAAED;AAAjC,OAAchB,UAAd;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;MAvBQW,W;;AAyBT,SAASQ,UAAT,CAAoBvB,KAApB,EAA2B;AACvB,QAAMwB,UAAU,GAAGxB,KAAK,CAACwB,UAAzB;AACA,QAAMC,KAAK,GAAGzB,KAAK,CAACyB,KAApB;AACA,QAAMR,YAAY,GAAGQ,KAAK,IAAIA,KAAK,CAACZ,GAAN,CAAUa,IAAI,IAAIA,IAAI,CAACC,OAAvB,CAA9B;AAEA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,iBAAiB,GAAG,EAAxB;;AAEA,OAAK,MAAMC,QAAX,IAAuBN,UAAvB,EAAmC;AAC/B,UAAMpB,UAAU,GAAG0B,QAAQ,CAACC,WAA5B;AACA,UAAMb,YAAY,GAAGY,QAAQ,CAACE,aAA9B;AACA,UAAMb,aAAa,GAAGW,QAAQ,CAACG,QAA/B;AACA,UAAMb,eAAe,GAAGU,QAAQ,CAACI,gBAAjC;AACAN,IAAAA,cAAc,CAACN,IAAf,eAAoB,QAAC,WAAD;AACa,MAAA,UAAU,EAAElB,UADzB;AAEa,MAAA,YAAY,EAAEc,YAF3B;AAGa,MAAA,aAAa,EAAEC,aAH5B;AAIa,MAAA,eAAe,EAAEC,eAJ9B;AAKa,MAAA,YAAY,EAAEH,YAL3B;AAMa,MAAA,mBAAmB,EAAEjB,KAAK,CAACG;AANxC,OAAkBC,UAAlB;AAAA;AAAA;AAAA;AAAA,YAApB;AASA,UAAM+B,cAAc,GAAGf,eAAe,GAAGD,aAAa,CAACiB,MAAvD;;AACA,SAAK,MAAM/B,MAAX,IAAqBc,aAArB,EAAoC;AAChC,UAAI,EAAEd,MAAM,IAAIwB,iBAAZ,CAAJ,EAAoC;AAChCA,QAAAA,iBAAiB,CAACxB,MAAD,CAAjB,GAA4B,CAA5B;AACH;;AACDwB,MAAAA,iBAAiB,CAACxB,MAAD,CAAjB,IAA6B8B,cAA7B;AACH;AACJ;;AAED,OAAK,MAAM9B,MAAX,IAAqBwB,iBAArB,EAAwC;AACpCA,IAAAA,iBAAiB,CAACxB,MAAD,CAAjB,GAA4BgC,IAAI,CAACC,KAAL,CAAWT,iBAAiB,CAACxB,MAAD,CAAjB,GAA4B,GAAvC,IAA8C,GAA1E;AACH;;AAEDuB,EAAAA,cAAc,CAACN,IAAf,eAAoB,QAAC,YAAD;AAAuB,IAAA,QAAQ,EAAEO;AAAjC,KAAmB,CAAC,CAApB;AAAA;AAAA;AAAA;AAAA,UAApB;AAEA,SAAQD,cAAR;AACH;;MAtCQL,U;AAwCT,eAAeA,UAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["function ParticipationCheckbox(props) {\n    const handleClick = (e) => {\n        props.handleCheckboxClick(e);\n    }\n    return <td><input type=\"checkbox\"\n                      value={[props.activityID, props.userID]}\n                      onClick={handleClick}/></td>\n}\n\nfunction RowCell(props) {\n    return <td>{props.value}</td>\n}\n\nfunction TotalAndDebt(props) {\n    const totalExpenses = Object.entries(props.expenses);\n    return (\n        <tr>\n            <th>Total</th>\n            {totalExpenses.map(expense => <RowCell key={expense[0]} value={expense[1]}/>)}\n        </tr>\n    );\n}\n\nfunction ActivityRow(props) {\n    const usersID = props.partyUsersID;\n    const activityID = props.activityID;\n    const activityName = props.activityName;\n    const activityUsers = props.activityUsers;\n    const activityExpense = props.activityExpense;\n    let checkboxes = [];\n\n    // TODO: pre state to render\n    for (const userID of usersID) {\n        checkboxes.push(<ParticipationCheckbox key={activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={activityID}\n                                               userID={userID}\n                                               defaultChecked={userID in activityUsers}/>);\n    }\n    return (\n        <tr>\n            <RowCell key={activityName} value={activityName}/>\n            {checkboxes}\n            <RowCell key={activityID} value={activityExpense}/>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    let totalUserExpenses = {};\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        for (const userID of activityUsers) {\n            if (!(userID in totalUserExpenses)) {\n                totalUserExpenses[userID] = 0;\n            }\n            totalUserExpenses[userID] += partialExpense;\n        }\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    activitiesRows.push(<TotalAndDebt key={-1} expenses={totalUserExpenses}/>)\n\n    return (activitiesRows);\n}\n\nexport default Activities;\n// var totalUserExpenses = [];\n//\n// for (const userID of partyUsersID) {\n//     var expense = 0;\n//     for (const activity of activities) {\n//         // const partialExpense =\n//         const activityExpense = activity.activity_expense;\n//         const activityUsersNumber = activity.users_id.length;\n//         console.log(activityExpense, activityUsersNumber);\n//         expense += Math.round(activityExpense / activityUsersNumber * 100) / 100;\n//     }\n//     totalUserExpenses.push(expense);\n// }\n\n// <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n"]},"metadata":{},"sourceType":"module"}