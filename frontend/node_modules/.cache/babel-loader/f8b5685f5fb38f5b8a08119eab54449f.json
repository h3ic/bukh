{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { HeaderRowCell, RowCell, ParticipationCheckbox } from \"./TableElements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TotalAndDebt(props) {\n  const totalExpenses = Object.entries(props.expenses); // artificially added activity users break the table\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Total\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), totalExpenses.map(expense => /*#__PURE__*/_jsxDEV(RowCell, {\n      value: expense[1]\n    }, expense[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 43\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TotalAndDebt;\n\nfunction ActivityRow(props) {\n  let checkboxes = []; // console.log(partyUsersID);\n  // console.log(activityUsers);\n\n  for (const userID of props.partyUsersID) {\n    // console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: props.activityID,\n      userID: userID,\n      defaultChecked: props.activityUsers.includes(userID)\n    }, props.activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderRowCell, {\n      value: props.activityName\n    }, props.activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: props.activityExpense\n    }, props.activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id);\n  let activitiesRows = [];\n  let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n\n    for (const userID of activityUsers) {\n      totalUserExpenses[userID] += partialExpense;\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  }\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalAndDebt, {\n    expenses: totalUserExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c3 = Activities;\nexport default Activities; // <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TotalAndDebt\");\n$RefreshReg$(_c2, \"ActivityRow\");\n$RefreshReg$(_c3, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["HeaderRowCell","RowCell","ParticipationCheckbox","TotalAndDebt","props","totalExpenses","Object","entries","expenses","map","expense","ActivityRow","checkboxes","userID","partyUsersID","push","handleCheckboxClick","activityID","activityUsers","includes","activityName","activityExpense","Activities","activities","users","user","user_id","activitiesRows","totalUserExpenses","fromEntries","activity","activity_id","activity_name","users_id","activity_expense","partialExpense","length","Math","round"],"mappings":"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","sourcesContent":["import {HeaderRowCell, RowCell, ParticipationCheckbox} from \"./TableElements\";\n\nfunction TotalAndDebt(props) {\n    const totalExpenses = Object.entries(props.expenses);\n    // artificially added activity users break the table\n    return (\n        <tr>\n            <th><i>Total</i></th>\n            {totalExpenses.map(expense => <RowCell key={expense[0]} value={expense[1]}/>)}\n        </tr>\n    );\n}\n\nfunction ActivityRow(props) {\n    let checkboxes = [];\n    // console.log(partyUsersID);\n    // console.log(activityUsers);\n    for (const userID of props.partyUsersID) {\n        // console.log(activityName, userID, partyUsersID[userID], userID in activityUsers);\n        checkboxes.push(<ParticipationCheckbox key={props.activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={props.activityID}\n                                               userID={userID}\n                                               defaultChecked={props.activityUsers.includes(userID)}/>);\n    }\n    return (\n        <tr>\n            <HeaderRowCell key={props.activityName} value={props.activityName}/>\n            {checkboxes}\n            <RowCell key={props.activityID} value={props.activityExpense}/>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        for (const userID of activityUsers) {\n            totalUserExpenses[userID] += partialExpense;\n        }\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    activitiesRows.push(<TotalAndDebt key={-1} expenses={totalUserExpenses}/>);\n\n    return (activitiesRows);\n}\n\nexport default Activities;\n\n// <tr>\n//     {activitiesNames && activitiesNames.map(activityName => <Activity key={activityName.toString()}\n//                                                                       activityName={activityName}/>)}\n//     {activitiesUsers && activitiesUsers.map(activityUsers => <ParticipationCheckbox\n//         usersID={activityUsers}/>)}\n//     {activitiesTotalPrice && activitiesTotalPrice.map(activityTotalPrice => <ActivityTotalPrice\n//         key={activityTotalPrice.toString()}\n//         totalPrice={activityTotalPrice}/>)}\n// </tr>\n//     );\n"]},"metadata":{},"sourceType":"module"}