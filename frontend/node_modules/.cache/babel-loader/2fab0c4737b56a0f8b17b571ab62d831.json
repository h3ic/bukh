{"ast":null,"code":"// separate logic and make uniform total/debt rows\n// async?\n// PARTYTABLE\n// activity expenses = item1 + item2\n// total expensespseruser = activity1 exp + activity2 exp\n// activity expenses = item1 + item2\n\n/*\n\n */\nexport function calcActivityExpenses(activities, items) {\n  let activityExpenses = {};\n\n  for (const activity of activities) {\n    activityExpenses[activity.activity_id] = 0;\n    const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n    for (const item of activityItems) {\n      activityExpenses[activity.activity_id] += item.item_price;\n    }\n  }\n\n  return activityExpenses;\n}\nexport function calcTotalExpensesPerUser(activities, activityExpenses) {\n  let totalExpensesPerUser = {};\n\n  for (const activity of activities) {\n    const partialExpense = activityExpenses[activity.activity_id] / activity.users_id.length;\n\n    for (const userID of activity.users_id) {\n      totalExpensesPerUser[userID] += partialExpense;\n    }\n  }\n\n  return totalExpensesPerUser;\n}\n\nfunction ActivityExpenses(props) {\n  const activities = props.activities;\n  const items = props.items;\n  const users = props.users; // duplicates (move to loop)\n\n  let activityExpenses = Object.fromEntries(activities.map(activity => [activity, 0]));\n  let totalUserExpenses = Object.fromEntries(users.map(userID => [userID, 0])); // activityExpenses = {};\n  // totalUserExpenses = {};\n\n  for (const activity of activities) {\n    // let activityExpensesPerUser = Object.fromEntries(activity.users_id.map(userID => [userID, 0]));\n    const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n    for (const item of activityItems) {\n      activityExpenses[activity.activity_id] += item.item_price;\n    } // totalexpensesperuser\n\n\n    const partialExpense = activityExpenses[activity.activity_id] / activity.users_id.length;\n\n    for (const userID of activity.users_id) {\n      totalUserExpenses[userID] += partialExpense;\n    }\n\n    return activityExpenses;\n  }\n} // single activity expense function\n\n\n_c = ActivityExpenses;\n\nfunction TotalExpensesPerUser(props) {\n  const activities = props.activities;\n  const partyUsers = props.users;\n  const partyUsersID = partyUsers && partyUsers.map(user => user.user_id);\n  let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n  for (const activity of activities) {\n    // import activityExpenses\n    const activityExpenses = {\n      \"kk\": 100,\n      \"cc\": 200\n    }; // const partialExpense = activityExpense / activityUsers.length;\n  }\n} // like inside an activity?\n\n\n_c2 = TotalExpensesPerUser;\n\nfunction ActivityExpensesPerUser() {}\n\n_c3 = ActivityExpensesPerUser;\n\nfunction DebtPerUser() {}\n\n_c4 = DebtPerUser;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ActivityExpenses\");\n$RefreshReg$(_c2, \"TotalExpensesPerUser\");\n$RefreshReg$(_c3, \"ActivityExpensesPerUser\");\n$RefreshReg$(_c4, \"DebtPerUser\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Calculations.js"],"names":["calcActivityExpenses","activities","items","activityExpenses","activity","activity_id","activityItems","filter","item","items_id","includes","item_id","item_price","calcTotalExpensesPerUser","totalExpensesPerUser","partialExpense","users_id","length","userID","ActivityExpenses","props","users","Object","fromEntries","map","totalUserExpenses","TotalExpensesPerUser","partyUsers","partyUsersID","user","user_id","ActivityExpensesPerUser","DebtPerUser"],"mappings":"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","sourcesContent":["// separate logic and make uniform total/debt rows\n// async?\n\n// PARTYTABLE\n// activity expenses = item1 + item2\n// total expensespseruser = activity1 exp + activity2 exp\n\n// activity expenses = item1 + item2\n/*\n\n */\nexport function calcActivityExpenses(activities, items) {\n    let activityExpenses = {};\n\n    for (const activity of activities) {\n        activityExpenses[activity.activity_id] = 0;\n        const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n        for (const item of activityItems) {\n            activityExpenses[activity.activity_id] += item.item_price;\n        }\n    }\n    return activityExpenses;\n}\n\nexport function calcTotalExpensesPerUser(activities, activityExpenses) {\n    let totalExpensesPerUser = {};\n\n    for (const activity of activities) {\n\n        const partialExpense = activityExpenses[activity.activity_id] / activity.users_id.length;\n\n        for (const userID of activity.users_id) {\n            totalExpensesPerUser[userID] += partialExpense;\n        }\n    }\n    return totalExpensesPerUser;\n}\n\nfunction ActivityExpenses(props) {\n    const activities = props.activities;\n    const items = props.items;\n    const users = props.users;\n\n    // duplicates (move to loop)\n    let activityExpenses = Object.fromEntries(activities.map(activity => [activity, 0]));\n    let totalUserExpenses = Object.fromEntries(users.map(userID => [userID, 0]));\n\n    // activityExpenses = {};\n    // totalUserExpenses = {};\n\n    for (const activity of activities) {\n\n        // let activityExpensesPerUser = Object.fromEntries(activity.users_id.map(userID => [userID, 0]));\n\n        const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n        for (const item of activityItems) {\n            activityExpenses[activity.activity_id] += item.item_price;\n        }\n\n        // totalexpensesperuser\n        const partialExpense = activityExpenses[activity.activity_id] / activity.users_id.length;\n        for (const userID of activity.users_id) {\n            totalUserExpenses[userID] += partialExpense;\n        }\n\n        return activityExpenses;\n    }\n}\n\n// single activity expense function\n\nfunction TotalExpensesPerUser(props) {\n    const activities = props.activities;\n    const partyUsers = props.users;\n\n    const partyUsersID = partyUsers && partyUsers.map(user => user.user_id);\n    let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n    for (const activity of activities) {\n        // import activityExpenses\n        const activityExpenses = {\n            \"kk\": 100,\n            \"cc\": 200\n        }\n        // const partialExpense = activityExpense / activityUsers.length;\n    }\n}\n\n// like inside an activity?\nfunction ActivityExpensesPerUser() {\n}\n\nfunction DebtPerUser() {\n\n}\n"]},"metadata":{},"sourceType":"module"}