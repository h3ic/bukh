{"ast":null,"code":"/**\n * Sums prices of items for all activities\n * Used in PartyTable's \"Expenses\" column\n *\n * @param activities\n * @param items\n * @returns {{}}\n */\nexport function calcActivityExpenses(activities, items) {\n  let activityExpenses = {};\n\n  for (const activity of activities) {\n    activityExpenses[activity.activity_id] = 0;\n    const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n    for (const item of activityItems) {\n      activityExpenses[activity.activity_id] += item.item_price;\n    }\n  }\n\n  return activityExpenses;\n}\n/**\n * Calculates total expenses and debt data for all users in PartyTable\n * Used in TotalRow component\n *\n * @param users\n * @param activities\n * @param items\n * @param activitiesExpenses\n * @returns {{debt: {[p: string]: any}, expenses: {[p: string]: any}}}\n */\n\nexport function calcTotalUsersFinance(users, activities, items, activitiesExpenses) {\n  let totalUsersFinance = {\n    'expenses': Object.fromEntries(users.map(user => [user.user_id, 0])),\n    'debt': Object.fromEntries(users.map(user => [user.user_id, 0]))\n  };\n  console.log('calc1', totalUsersFinance);\n\n  for (const activity of activities) {\n    const partialExpense = activitiesExpenses[activity.activity_id] / activity.users_id.length;\n    const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n    for (const userID of activity.users_id) {\n      // totalUsersFinance[userID]['expenses'] += partialExpense;\n      // totalUsersFinance[userID]['debt'] += partialExpense;\n      totalUsersFinance['expenses'][userID] += partialExpense;\n      totalUsersFinance['debt'][userID] += partialExpense;\n    }\n\n    for (const item of activityItems) {\n      // totalUsersFinance[item.bought_by]['debt'] -= item.item_price;\n      totalUsersFinance['debt'][item.bought_by] -= item.item_price;\n    }\n  }\n\n  for (const userID in totalUsersFinance.expenses) {\n    // totalUsersFinance[userID]['expenses'] = Math.round(totalUsersFinance[userID]['expenses'] * 100) / 100;\n    // totalUsersFinance[userID]['debt'] = Math.round(totalUsersFinance[userID]['debt'] * 100) / 100;\n    totalUsersFinance['expenses'][userID] = Math.round(totalUsersFinance['expenses'][userID] * 100) / 100;\n    totalUsersFinance['debt'][userID] = Math.round(totalUsersFinance['debt'][userID] * 100) / 100;\n  }\n\n  return totalUsersFinance;\n}\n/**\n * Caclulates users' expenses in ActivityTable\n * Used in TotalRow component\n *\n * @param items\n * @returns {{}}\n */\n\nexport function calcActivityUserExpenses(items) {\n  let activityUserExpenses = {};\n\n  for (const item of items) {\n    activityUserExpenses[item.bought_by] += item.item_price;\n  }\n\n  return activityUserExpenses;\n}","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Calculations.js"],"names":["calcActivityExpenses","activities","items","activityExpenses","activity","activity_id","activityItems","filter","item","items_id","includes","item_id","item_price","calcTotalUsersFinance","users","activitiesExpenses","totalUsersFinance","Object","fromEntries","map","user","user_id","console","log","partialExpense","users_id","length","userID","bought_by","expenses","Math","round","calcActivityUserExpenses","activityUserExpenses"],"mappings":"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","sourcesContent":["/**\n * Sums prices of items for all activities\n * Used in PartyTable's \"Expenses\" column\n *\n * @param activities\n * @param items\n * @returns {{}}\n */\nexport function calcActivityExpenses(activities, items) {\n    let activityExpenses = {};\n\n    for (const activity of activities) {\n        activityExpenses[activity.activity_id] = 0;\n        const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n        for (const item of activityItems) {\n            activityExpenses[activity.activity_id] += item.item_price;\n        }\n    }\n    return activityExpenses;\n}\n\n\n/**\n * Calculates total expenses and debt data for all users in PartyTable\n * Used in TotalRow component\n *\n * @param users\n * @param activities\n * @param items\n * @param activitiesExpenses\n * @returns {{debt: {[p: string]: any}, expenses: {[p: string]: any}}}\n */\nexport function calcTotalUsersFinance(users, activities, items, activitiesExpenses) {\n    let totalUsersFinance = {\n        'expenses': Object.fromEntries(users.map(user => [user.user_id, 0])),\n            'debt': Object.fromEntries(users.map(user => [user.user_id, 0]))\n    };\n    console.log('calc1', totalUsersFinance);\n\n    for (const activity of activities) {\n\n        const partialExpense = activitiesExpenses[activity.activity_id] / activity.users_id.length;\n        const activityItems = items.filter(item => activity.items_id.includes(item.item_id));\n\n        for (const userID of activity.users_id) {\n            // totalUsersFinance[userID]['expenses'] += partialExpense;\n            // totalUsersFinance[userID]['debt'] += partialExpense;\n            totalUsersFinance['expenses'][userID] += partialExpense;\n            totalUsersFinance['debt'][userID] += partialExpense;\n        }\n        for (const item of activityItems) {\n            // totalUsersFinance[item.bought_by]['debt'] -= item.item_price;\n            totalUsersFinance['debt'][item.bought_by] -= item.item_price;\n        }\n    }\n\n    for (const userID in totalUsersFinance.expenses) {\n        // totalUsersFinance[userID]['expenses'] = Math.round(totalUsersFinance[userID]['expenses'] * 100) / 100;\n        // totalUsersFinance[userID]['debt'] = Math.round(totalUsersFinance[userID]['debt'] * 100) / 100;\n        totalUsersFinance['expenses'][userID] = Math.round(totalUsersFinance['expenses'][userID] * 100) / 100;\n        totalUsersFinance['debt'][userID] = Math.round(totalUsersFinance['debt'][userID] * 100) / 100;\n    }\n    return totalUsersFinance;\n}\n\n\n/**\n * Caclulates users' expenses in ActivityTable\n * Used in TotalRow component\n *\n * @param items\n * @returns {{}}\n */\nexport function calcActivityUserExpenses(items) {\n    let activityUserExpenses = {};\n    for (const item of items) {\n        activityUserExpenses[item.bought_by] += item.item_price;\n    }\n    return activityUserExpenses;\n}"]},"metadata":{},"sourceType":"module"}