{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { ActivityRowCell, RowCell, ParticipationCheckbox, TotalRow } from \"./TableElements\";\nimport { calcActivityExpenses, calcTotalUsersFinance } from './Calculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ActivityRow(props) {\n  let checkboxes = [];\n\n  for (const userID of props.partyUsersID) {\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: props.activityID,\n      userID: userID,\n      defaultChecked: props.activityUsers.includes(userID)\n    }, props.activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(ActivityRowCell, {\n      activity: props.activity,\n      value: props.activityName,\n      handleActivityClick: props.handleActivityClick\n    }, props.activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: props.activityExpense\n    }, props.activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ActivityRow;\n\nfunction Activities(props) {\n  // const activities = props.activities;\n  const partyUsersID = props.users.map(user => user.user_id); // const partyUsersID = props.users && props.users.map(user => user.user_id);\n\n  let activitiesRows = []; // let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n  const activitiesExpenses = calcActivityExpenses(props.activities, props.items);\n\n  for (const activity of props.activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id; // const activityExpense = activity.activity_expense;\n    // const activityItems = activity.items;\n\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activity: activity,\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers //expense.\n      ,\n      activityExpense: activitiesExpenses[activityID],\n      partyUsersID: partyUsersID,\n      handleActivityClick: props.handleActivityClick,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }, this)); // const partialExpense = activityExpense / activityUsers.length;\n    // let totalDebtExpenses = Object.fromEntries(activityUsers.map(userID => [userID, 0]));\n    // for (const userID of activityUsers) {\n    //     totalUserExpenses[userID] += partialExpense;\n    //     for (const item of activityItems) {\n    //         totalDebtExpenses[item.bought_by] += item.item_price;\n    //     }\n    // }\n  } // for (const userID in totalUserExpenses) {\n  //     totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  // }\n  // activitiesRows.push(<TotalRow key={-1} expenses={totalUserExpenses}/>);\n\n\n  console.log(totalUsersFinance);\n  const totalUsersFinance = calcTotalUsersFinance(props.users, props.activities, props.items, activitiesExpenses);\n  const usersDebt = totalUsersFinance.map(user => user.expenses);\n  const usersExpenses = totalUsersFinance.map(user => user.debt);\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalRow, {\n    expenses: usersDebt\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 25\n  }, this));\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalRow, {\n    debt: usersExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c2 = Activities;\nexport default Activities;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ActivityRow\");\n$RefreshReg$(_c2, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["ActivityRowCell","RowCell","ParticipationCheckbox","TotalRow","calcActivityExpenses","calcTotalUsersFinance","ActivityRow","props","checkboxes","userID","partyUsersID","push","handleCheckboxClick","activityID","activityUsers","includes","activity","activityName","handleActivityClick","activityExpense","Activities","users","map","user","user_id","activitiesRows","activitiesExpenses","activities","items","activity_id","activity_name","users_id","console","log","totalUsersFinance","usersDebt","expenses","usersExpenses","debt"],"mappings":"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","sourcesContent":["import {ActivityRowCell, RowCell, ParticipationCheckbox, TotalRow} from \"./TableElements\";\nimport {calcActivityExpenses, calcTotalUsersFinance} from './Calculations';\n\n\nfunction ActivityRow(props) {\n    let checkboxes = [];\n    for (const userID of props.partyUsersID) {\n        checkboxes.push(<ParticipationCheckbox key={props.activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={props.activityID}\n                                               userID={userID}\n                                               defaultChecked={props.activityUsers.includes(userID)}/>);\n    }\n    return (\n        <tr>\n            <ActivityRowCell key={props.activityName}\n                             activity={props.activity}\n                             value={props.activityName} handleActivityClick={props.handleActivityClick}/>\n            {checkboxes}\n            <RowCell key={props.activityID} value={props.activityExpense}/>\n        </tr>\n    );\n}\n\nfunction Activities(props) {\n    // const activities = props.activities;\n    const partyUsersID = props.users.map(user => user.user_id);\n    // const partyUsersID = props.users && props.users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    // let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n    const activitiesExpenses = calcActivityExpenses(props.activities, props.items);\n\n    for (const activity of props.activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        // const activityExpense = activity.activity_expense;\n        // const activityItems = activity.items;\n\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activity={activity}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         //expense.\n                                         activityExpense={activitiesExpenses[activityID]}\n                                         partyUsersID={partyUsersID}\n                                         handleActivityClick={props.handleActivityClick}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        // const partialExpense = activityExpense / activityUsers.length;\n        // let totalDebtExpenses = Object.fromEntries(activityUsers.map(userID => [userID, 0]));\n        // for (const userID of activityUsers) {\n        //     totalUserExpenses[userID] += partialExpense;\n        //     for (const item of activityItems) {\n        //         totalDebtExpenses[item.bought_by] += item.item_price;\n        //     }\n        // }\n    }\n\n    // for (const userID in totalUserExpenses) {\n    //     totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    // }\n\n    // activitiesRows.push(<TotalRow key={-1} expenses={totalUserExpenses}/>);\n    console.log(totalUsersFinance);\n    const totalUsersFinance = calcTotalUsersFinance(props.users, props.activities, props.items, activitiesExpenses);\n    const usersDebt = totalUsersFinance.map(user => user.expenses);\n    const usersExpenses = totalUsersFinance.map(user => user.debt);\n    activitiesRows.push(<TotalRow key={-1} expenses={usersDebt}/>);\n    activitiesRows.push(<TotalRow key={-1} debt={usersExpenses}/>);\n\n    return (activitiesRows);\n}\n\nexport default Activities;"]},"metadata":{},"sourceType":"module"}