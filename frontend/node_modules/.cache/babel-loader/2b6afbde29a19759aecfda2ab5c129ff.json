{"ast":null,"code":"var _jsxFileName = \"/home/h3ic/bukh/frontend/src/Activities.js\";\nimport { HeaderRowCell, RowCell, ParticipationCheckbox, TotalRow } from \"./TableElements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DebtRow(props) {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"th\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Debt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 13\n  }, this);\n}\n\n_c = DebtRow;\n\nfunction ActivityRow(props) {\n  let checkboxes = [];\n\n  for (const userID of props.partyUsersID) {\n    checkboxes.push( /*#__PURE__*/_jsxDEV(ParticipationCheckbox, {\n      handleCheckboxClick: props.handleCheckboxClick,\n      activityID: props.activityID,\n      userID: userID,\n      defaultChecked: props.activityUsers.includes(userID)\n    }, props.activityID + userID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 25\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderRowCell, {\n      value: props.activityName\n    }, props.activityName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), checkboxes, /*#__PURE__*/_jsxDEV(RowCell, {\n      value: props.activityExpense\n    }, props.activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n} // separate function for expenses and debt calculation\n\n\n_c2 = ActivityRow;\n\nfunction Activities(props) {\n  const activities = props.activities;\n  const users = props.users;\n  const partyUsersID = users && users.map(user => user.user_id);\n  let activitiesRows = [];\n  let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0])); // debt = totalexpenses\n\n  for (const activity of activities) {\n    const activityID = activity.activity_id;\n    const activityName = activity.activity_name;\n    const activityUsers = activity.users_id;\n    const activityExpense = activity.activity_expense;\n    const activityItems = activity.items; // iterate over items, calc the sum; subtract items - total\n    // what if unfolding\n\n    activitiesRows.push( /*#__PURE__*/_jsxDEV(ActivityRow, {\n      activityID: activityID,\n      activityName: activityName,\n      activityUsers: activityUsers,\n      activityExpense: activityExpense,\n      partyUsersID: partyUsersID,\n      handleCheckboxClick: props.handleCheckboxClick\n    }, activityID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }, this));\n    const partialExpense = activityExpense / activityUsers.length;\n    let totalDebtExpenses = Object.fromEntries(activityUsers.map(userID => [userID, 0]));\n\n    for (const userID of activityUsers) {\n      totalUserExpenses[userID] += partialExpense;\n\n      for (const item of activityItems) {\n        totalDebtExpenses[item.bought_by] += item.item_price;\n      }\n    }\n  }\n\n  for (const userID in totalUserExpenses) {\n    totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n  }\n\n  activitiesRows.push( /*#__PURE__*/_jsxDEV(TotalRow, {\n    expenses: totalUserExpenses\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 25\n  }, this));\n  return activitiesRows;\n}\n\n_c3 = Activities;\nexport default Activities;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DebtRow\");\n$RefreshReg$(_c2, \"ActivityRow\");\n$RefreshReg$(_c3, \"Activities\");","map":{"version":3,"sources":["/home/h3ic/bukh/frontend/src/Activities.js"],"names":["HeaderRowCell","RowCell","ParticipationCheckbox","TotalRow","DebtRow","props","ActivityRow","checkboxes","userID","partyUsersID","push","handleCheckboxClick","activityID","activityUsers","includes","activityName","activityExpense","Activities","activities","users","map","user","user_id","activitiesRows","totalUserExpenses","Object","fromEntries","activity","activity_id","activity_name","users_id","activity_expense","activityItems","items","partialExpense","length","totalDebtExpenses","item","bought_by","item_price","Math","round"],"mappings":"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","sourcesContent":["import {HeaderRowCell, RowCell, ParticipationCheckbox, TotalRow} from \"./TableElements\";\n\nfunction DebtRow(props) {\n    return (<tr>\n        <th><i>Debt</i></th>\n    </tr>)\n}\n\nfunction ActivityRow(props) {\n    let checkboxes = [];\n    for (const userID of props.partyUsersID) {\n        checkboxes.push(<ParticipationCheckbox key={props.activityID + userID}\n                                               handleCheckboxClick={props.handleCheckboxClick}\n                                               activityID={props.activityID}\n                                               userID={userID}\n                                               defaultChecked={props.activityUsers.includes(userID)}/>);\n    }\n    return (\n        <tr>\n            <HeaderRowCell key={props.activityName} value={props.activityName}/>\n            {checkboxes}\n            <RowCell key={props.activityID} value={props.activityExpense}/>\n        </tr>\n    );\n}\n\n// separate function for expenses and debt calculation\n\nfunction Activities(props) {\n    const activities = props.activities;\n    const users = props.users;\n    const partyUsersID = users && users.map(user => user.user_id);\n\n    let activitiesRows = [];\n    let totalUserExpenses = Object.fromEntries(partyUsersID.map(userID => [userID, 0]));\n\n    // debt = totalexpenses\n\n    for (const activity of activities) {\n        const activityID = activity.activity_id;\n        const activityName = activity.activity_name;\n        const activityUsers = activity.users_id;\n        const activityExpense = activity.activity_expense;\n        const activityItems = activity.items;\n        // iterate over items, calc the sum; subtract items - total\n        // what if unfolding\n\n        activitiesRows.push(<ActivityRow key={activityID}\n                                         activityID={activityID}\n                                         activityName={activityName}\n                                         activityUsers={activityUsers}\n                                         activityExpense={activityExpense}\n                                         partyUsersID={partyUsersID}\n                                         handleCheckboxClick={props.handleCheckboxClick}\n        />);\n\n        const partialExpense = activityExpense / activityUsers.length;\n        let totalDebtExpenses = Object.fromEntries(activityUsers.map(userID => [userID, 0]));\n        for (const userID of activityUsers) {\n            totalUserExpenses[userID] += partialExpense;\n            for (const item of activityItems) {\n                totalDebtExpenses[item.bought_by] += item.item_price;\n            }\n        }\n    }\n\n    for (const userID in totalUserExpenses) {\n        totalUserExpenses[userID] = Math.round(totalUserExpenses[userID] * 100) / 100;\n    }\n\n    activitiesRows.push(<TotalRow key={-1} expenses={totalUserExpenses}/>);\n\n    return (activitiesRows);\n}\n\nexport default Activities;"]},"metadata":{},"sourceType":"module"}